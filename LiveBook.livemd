# GeoServer Configuration Demo

## Overview

This LiveBook demonstrates how to use the local `geoserver_config` package to manage GeoServer CRUD

## Setup Local Dependency

First, we need to install the local dependency:

```elixir
Mix.install([
  {:req, "~> 0.4.0"},
  {:geoserver_config, path: "D:/Elixir Intern/aoraki-portal/geoserver_config"}
])
```

## Workspaces CRUD

```elixir
alias GeoserverConfig
GeoserverConfig.fetch_workspaces()
```

```elixir
GeoserverConfig.Workspaces.create_workspace("new_workspace_name")
```

<!-- livebook:{"branch_parent_index":2} -->

## Workspace PUT Method (Its unautorized to change the name of Workspace, but If you use the same name then it gets updated(no use at all)).

```elixir
GeoserverConfig.Workspaces.update_workspace("new_workspace_name", "new_workspace_name")
```

```elixir
GeoserverConfig.Workspaces.delete_workspace("new_workspace_name")
```

## Datastores CRUD

```elixir
# Datastores: GET Method
GeoserverConfig.Datastores.list_datastores("demo_test")
```

```elixir
# Datastore POST Method
GeoserverConfig.Datastores.create_datastore(
  "demo_test",  # Workspace name
  "demostore_postgis2",  # Datastore name
  "postgis",  # The datastore type
  %{
    host: "localhost",
    port: 5432,
    database: "opengeo",
    user: "opengeo",
    passwd: "opengeo"
  }
)
```

```elixir
# Datastore PUT Method
GeoserverConfig.Datastores.update_datastore("demo_test", "demostore_postgis2", "postgis", %{
   description: "Tagram bagram",
   host: "localhost",
   port: 5432,
   database: "opengeo",
   user: "openhaider",
   passwd: "opengeo"
 })
```

```elixir
# DataStore Delete Method
GeoserverConfig.Datastores.delete_datastore("demo_test", "demostore_postgis2", true)
```

## CoverageStore CRUD

```elixir
# Coverage Stores Fetch Method
GeoserverConfig.Coveragestores.list_coveragestores("demo_test")
```

```elixir
# Coverage Store Post Method
GeoserverConfig.Coveragestores.create_coveragestore(
  "demo_test",        # workspace
  "dem_3x3_test1",     # storename
  "/home/geoadmin/run/ut_sdi_2021/SDI/dems/dem_3x3.tif",  # Local GeoTIFF file path
  "A description of the coverage store"
)
```

```elixir
# POST METHOD "COG GeoTIFF" Coverage Store

GeoserverConfig.Coveragestores.create_coveragestore(
   "demo_test",          # workspace
   "demo_cog_test",      # storename
   "cog://https://storage.googleapis.com/geo-assets/dcube_pub/estonia/sentinel2/ndvi/2024/est_s2_ndvi_2024-06-01_2024-08-31_cog.tif",
   "Test for GeoTIFF COG",
   %{
     connectionParameters: "",
     metadata: %{
       "entry" => %{
         "@key" => "CogSettings.Key",
        "cogSettings" => %{
          "useCachingStream" => false,
          "rangeReaderSettings" => "HTTP"
        }
      }
    },
    disableOnConnFailure: false
  }
)
```

```elixir
# PUT Method CoverageStore
GeoserverConfig.Coveragestores.update_coveragestore(
  "demo_test",           # workspace
  "dem_3x3_test1",       # store name
  %{
    type: "GeoTIFF",
    enabled: true,
    url: "file:///home/geoadmin/run/ut_sdi_2021/SDI/dems/dem_3x3.tif",
    description: "Updated description"
  }
)
```

```elixir
# Delete Method: Coverage Store
GeoserverConfig.Coveragestores.delete_coveragestore("demo_test", "demo_cog_test")
```

## Coverages/Layers CRUD

```elixir
# GET Method: Coverages
GeoserverConfig.list_coverages("demo_test", "dem_3x3_test")
```

```elixir
# POST Method: Coverages
file_path = "file:///home/geoadmin/run/ut_sdi_2021/SDI/dems/dem_3x3.tif"

response = GeoserverConfig.Coverages.create_coverage(
  "demo_test",             # workspace  
  "dem_3x3_test",          # coveragestore
  "dem_test_coverage1",    # coveragelayer
  %{
    title: "dem_test_coverage1",
    description: "Testing Layers for Geotiff",
    abstract: "Testing the Coverage Store",
    srs: "EPSG:3301",
    native_crs: "EPSG:3301",
    native_bbox: %{minx: 369000.0, maxx: 740000.0, miny: 6377000.0, maxy: 6635000.0},
    latlon_bbox: %{minx: 21.664072036889028, maxx: 28.275493984062805, miny: 57.47121886444548, maxy: 59.83122737438482},
    grid: %{
      dimension: [634, 477],
      transform: [10.0, 0.0, 369000.0, 0.0, -10.0, 6635000.0]
    },
    metadata: %{
      "cacheAgeMax" => 3600,
      "cachingEnabled" => true
    }
  },
  file_path
)
```

```elixir
# DELETE Method: Coverages
GeoserverConfig.delete_coverage("demo_test", "dem_3x3_test", "dem_test_coverage1", "true")
```

## Styles CRUD

```elixir
# GET Method: Styles
GeoserverConfig.list_styles()
```

```elixir
# GET Method: Styles (Workspace Specific)
GeoserverConfig.list_styles_workspace_specific("demo_test")
```

```elixir
# POST Method: Styles
sld_content = """
<?xml version="1.0" encoding="UTF-8"?>
<StyledLayerDescriptor version="1.0.0"
 xsi:schemaLocation="http://www.opengis.net/sld StyledLayerDescriptor.xsd"
 xmlns="http://www.opengis.net/sld"
 xmlns:ogc="http://www.opengis.net/ogc"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <NamedLayer>
    <Name>default_raster</Name>
    <UserStyle>
      <Title>Default Raster</Title>
      <Abstract>A sample style that draws a raster, good for displaying imagery</Abstract>
      <FeatureTypeStyle>
        <Rule>
          <Name>rule1</Name>
          <Title>Opaque Raster</Title>
          <Abstract>A raster with 100% opacity</Abstract>
          <RasterSymbolizer>
            <Opacity>1.0</Opacity>
          </RasterSymbolizer>
        </Rule>
      </FeatureTypeStyle>
    </UserStyle>
  </NamedLayer>
</StyledLayerDescriptor>
"""

GeoserverConfig.Styles.create_style(%{
  name: "dem_test_style2",
  sld_content: sld_content,
  filename: "dem.sld"
  # workspace: "demo_test"  # Add Workspace if style is Workspace specific
})
```

```elixir
# PUT Method: Styles
updated_sld = """
<?xml version="1.0" encoding="UTF-8"?>
<StyledLayerDescriptor version="1.0.0" xmlns="http://www.opengis.net/sld">
  <NamedLayer>
    <Name>Ghichkam</Name>
    <UserStyle>
      <Title>Updated Roads Style</Title>
      <FeatureTypeStyle>
        <Rule>
          <LineSymbolizer>
            <Stroke>
              <CssParameter name="stroke">#0000FF</CssParameter>
              <CssParameter name="stroke-width">3</CssParameter>
            </Stroke>
          </LineSymbolizer>
        </Rule>
      </FeatureTypeStyle>
    </UserStyle>
  </NamedLayer>
</StyledLayerDescriptor>
"""

GeoserverConfig.Styles.update_style(%{
  name: "dem_test_style2",
  sld_content: updated_sld,
  filename: "updated_dem.sld",
  # workspace: "demo_test"
})

```

```elixir
# DELETE Method: Styles (We need to add workspace name of style if workspace specific and recurse:true to TRUE if style is assigned to layer)
GeoserverConfig.delete_style("dem_test_style2", nil , recurse: true)
```

## Assigning Style to Layers

```elixir
#Assigning Style to layer (Workspace name, Layer Name, Style name to be assigned, Style workspace if style is workspace specific else nil)
GeoserverConfig.assign_style_to_layer("demo_test", "dem_test_coverage", "dem_test_style", "demo_test")
```
